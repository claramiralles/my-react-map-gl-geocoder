{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["MAPBOX_TOKEN","App","useState","latitude","longitude","zoom","viewport","setViewport","geocoderContainerRef","useRef","mapRef","handleViewportChange","useCallback","newViewport","handleGeocoderViewportChange","transitionDuration","style","height","width","ref","position","top","left","zIndex","onViewportChange","mapboxApiAccessToken","containerRef","render","document","getElementById","Boolean","window","location","hostname","match","ReactDOM","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sSAOMA,EAAe,+FAGfC,EAAM,WAAO,IAAD,EACgBC,mBAAS,CACvCC,SAAU,WACVC,UAAW,UACXC,KAAM,IAJQ,mBACTC,EADS,KACCC,EADD,KAMVC,EAAuBC,mBACvBC,EAASD,mBACTE,EAAuBC,uBAAY,SAACC,GAAD,OAAiBN,EAAYM,KAAc,IAG9EC,EAA+BF,uBACnC,SAACC,GAGC,OAAOF,EAAqB,2BACvBE,GAH4B,CAAEE,mBAAoB,SAOzD,CAACJ,IAGH,OACE,yBAAKK,MAAO,CAAEC,OAAQ,OAAQC,MAAO,UACnC,yBAAKC,IAAKX,EAAsBQ,MAAO,CAAEI,SAAU,WAAYC,IAAK,GAAIC,KAAM,GAAIC,OAAQ,KAC1F,kBAAC,IAAD,eACEJ,IAAKT,GACDJ,EAFN,CAGEY,MAAM,OACND,OAAO,OACPO,iBAAkBb,EAClBc,qBAAsBzB,IACtB,kBAAC,IAAD,CACEU,OAAQA,EACRgB,aAAclB,EACdgB,iBAAkBV,EAClBW,qBAAsBzB,EACtBoB,SAAS,gBAOnBO,iBAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SAEzB5B,QC7CK6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASR,OACP,kBAAC,IAAMS,WAAP,KACE,kBAAC,EAAD,OAEFR,SAASC,eAAe,SDyHpB,kBAAmBQ,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.64fe929a.chunk.js","sourcesContent":["import 'mapbox-gl/dist/mapbox-gl.css'\nimport 'react-map-gl-geocoder/dist/mapbox-gl-geocoder.css'\nimport React, { useState, useRef, useCallback } from 'react'\nimport { render } from 'react-dom'\nimport MapGL from 'react-map-gl'\nimport Geocoder from 'react-map-gl-geocoder'\n\nconst MAPBOX_TOKEN = 'pk.eyJ1Ijoic21peWFrYXdhIiwiYSI6ImNqcGM0d3U4bTB6dWwzcW04ZHRsbHl0ZWoifQ.X9cvdajtPbs9JDMG-CMDsA'\n \n//Netherlands country coordinates\nconst App = () => {\n  const [viewport, setViewport] = useState({\n    latitude: 52.2129919,\n    longitude: 5.2793703,\n    zoom: 4\n  })\n  const geocoderContainerRef = useRef()\n  const mapRef = useRef()\n  const handleViewportChange = useCallback((newViewport) => setViewport(newViewport), [])\n\n  // if you are happy with Geocoder default settings, you can just use handleViewportChange directly\n  const handleGeocoderViewportChange = useCallback(\n    (newViewport) => {\n      const geocoderDefaultOverrides = { transitionDuration: 1000 }\n\n      return handleViewportChange({\n        ...newViewport,\n        ...geocoderDefaultOverrides\n      })\n    },\n    [handleViewportChange]\n  )\n\n  return (\n    <div style={{ height: '40vh', width: '600px' }}>\n      <div ref={geocoderContainerRef} style={{ position: 'absolute', top: 20, left: 20, zIndex: 1 }} />\n      <MapGL\n        ref={mapRef}\n        {...viewport}\n        width=\"100%\"\n        height=\"100%\"\n        onViewportChange={handleViewportChange}\n        mapboxApiAccessToken={MAPBOX_TOKEN}>\n        <Geocoder\n          mapRef={mapRef}\n          containerRef={geocoderContainerRef}\n          onViewportChange={handleGeocoderViewportChange}\n          mapboxApiAccessToken={MAPBOX_TOKEN}\n          position=\"top-left\"\n        />\n      </MapGL>\n    </div>\n  )\n}\n\nrender(<App />, document.getElementById('root'))\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"],"sourceRoot":""}