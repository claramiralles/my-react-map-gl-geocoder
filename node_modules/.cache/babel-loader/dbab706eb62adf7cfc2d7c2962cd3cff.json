{"ast":null,"code":"import _objectSpread from\"/Users/clara/Documents/empower_2.0/inspiration_code/my-react-map-gl-geocoder/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/Users/clara/Documents/empower_2.0/inspiration_code/my-react-map-gl-geocoder/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import'mapbox-gl/dist/mapbox-gl.css';import'react-map-gl-geocoder/dist/mapbox-gl-geocoder.css';import React,{useState,useRef,useCallback}from'react';import{render}from'react-dom';import MapGL from'react-map-gl';import Geocoder from'react-map-gl-geocoder';var MAPBOX_TOKEN='pk.eyJ1Ijoic21peWFrYXdhIiwiYSI6ImNqcGM0d3U4bTB6dWwzcW04ZHRsbHl0ZWoifQ.X9cvdajtPbs9JDMG-CMDsA';//Netherlands country coordinates\nvar App=function App(){var _useState=useState({latitude:52.2129919,longitude:5.2793703,zoom:4}),_useState2=_slicedToArray(_useState,2),viewport=_useState2[0],setViewport=_useState2[1];var geocoderContainerRef=useRef();var mapRef=useRef();var handleViewportChange=useCallback(function(newViewport){return setViewport(newViewport);},[]);// if you are happy with Geocoder default settings, you can just use handleViewportChange directly\nvar handleGeocoderViewportChange=useCallback(function(newViewport){var geocoderDefaultOverrides={transitionDuration:1000};return handleViewportChange(_objectSpread(_objectSpread({},newViewport),geocoderDefaultOverrides));},[handleViewportChange]);return/*#__PURE__*/React.createElement(\"div\",{style:{height:'40vh',width:'600px'}},/*#__PURE__*/React.createElement(\"div\",{ref:geocoderContainerRef,style:{position:'absolute',top:20,left:20,zIndex:1}}),/*#__PURE__*/React.createElement(MapGL,Object.assign({ref:mapRef},viewport,{width:\"100%\",height:\"100%\",onViewportChange:handleViewportChange,mapboxApiAccessToken:MAPBOX_TOKEN}),/*#__PURE__*/React.createElement(Geocoder,{mapRef:mapRef,containerRef:geocoderContainerRef,onViewportChange:handleGeocoderViewportChange,mapboxApiAccessToken:MAPBOX_TOKEN,position:\"top-left\"})));};render(/*#__PURE__*/React.createElement(App,null),document.getElementById('root'));export default App;","map":{"version":3,"sources":["/Users/clara/Documents/empower_2.0/inspiration_code/my-react-map-gl-geocoder/src/App.js"],"names":["React","useState","useRef","useCallback","render","MapGL","Geocoder","MAPBOX_TOKEN","App","latitude","longitude","zoom","viewport","setViewport","geocoderContainerRef","mapRef","handleViewportChange","newViewport","handleGeocoderViewportChange","geocoderDefaultOverrides","transitionDuration","height","width","position","top","left","zIndex","document","getElementById"],"mappings":"qYAAA,MAAO,8BAAP,CACA,MAAO,mDAAP,CACA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,MAA1B,CAAkCC,WAAlC,KAAqD,OAArD,CACA,OAASC,MAAT,KAAuB,WAAvB,CACA,MAAOC,CAAAA,KAAP,KAAkB,cAAlB,CACA,MAAOC,CAAAA,QAAP,KAAqB,uBAArB,CAEA,GAAMC,CAAAA,YAAY,CAAG,8FAArB,CAEA;AACA,GAAMC,CAAAA,GAAG,CAAG,QAANA,CAAAA,GAAM,EAAM,eACgBP,QAAQ,CAAC,CACvCQ,QAAQ,CAAE,UAD6B,CAEvCC,SAAS,CAAE,SAF4B,CAGvCC,IAAI,CAAE,CAHiC,CAAD,CADxB,wCACTC,QADS,eACCC,WADD,eAMhB,GAAMC,CAAAA,oBAAoB,CAAGZ,MAAM,EAAnC,CACA,GAAMa,CAAAA,MAAM,CAAGb,MAAM,EAArB,CACA,GAAMc,CAAAA,oBAAoB,CAAGb,WAAW,CAAC,SAACc,WAAD,QAAiBJ,CAAAA,WAAW,CAACI,WAAD,CAA5B,EAAD,CAA4C,EAA5C,CAAxC,CAEA;AACA,GAAMC,CAAAA,4BAA4B,CAAGf,WAAW,CAC9C,SAACc,WAAD,CAAiB,CACf,GAAME,CAAAA,wBAAwB,CAAG,CAAEC,kBAAkB,CAAE,IAAtB,CAAjC,CAEA,MAAOJ,CAAAA,oBAAoB,gCACtBC,WADsB,EAEtBE,wBAFsB,EAA3B,CAID,CAR6C,CAS9C,CAACH,oBAAD,CAT8C,CAAhD,CAYA,mBACE,2BAAK,KAAK,CAAE,CAAEK,MAAM,CAAE,MAAV,CAAkBC,KAAK,CAAE,OAAzB,CAAZ,eACE,2BAAK,GAAG,CAAER,oBAAV,CAAgC,KAAK,CAAE,CAAES,QAAQ,CAAE,UAAZ,CAAwBC,GAAG,CAAE,EAA7B,CAAiCC,IAAI,CAAE,EAAvC,CAA2CC,MAAM,CAAE,CAAnD,CAAvC,EADF,cAEE,oBAAC,KAAD,gBACE,GAAG,CAAEX,MADP,EAEMH,QAFN,EAGE,KAAK,CAAC,MAHR,CAIE,MAAM,CAAC,MAJT,CAKE,gBAAgB,CAAEI,oBALpB,CAME,oBAAoB,CAAET,YANxB,gBAOE,oBAAC,QAAD,EACE,MAAM,CAAEQ,MADV,CAEE,YAAY,CAAED,oBAFhB,CAGE,gBAAgB,CAAEI,4BAHpB,CAIE,oBAAoB,CAAEX,YAJxB,CAKE,QAAQ,CAAC,UALX,EAPF,CAFF,CADF,CAoBD,CA3CD,CA6CAH,MAAM,cAAC,oBAAC,GAAD,MAAD,CAAUuB,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAV,CAAN,CAEA,cAAepB,CAAAA,GAAf","sourcesContent":["import 'mapbox-gl/dist/mapbox-gl.css'\nimport 'react-map-gl-geocoder/dist/mapbox-gl-geocoder.css'\nimport React, { useState, useRef, useCallback } from 'react'\nimport { render } from 'react-dom'\nimport MapGL from 'react-map-gl'\nimport Geocoder from 'react-map-gl-geocoder'\n\nconst MAPBOX_TOKEN = 'pk.eyJ1Ijoic21peWFrYXdhIiwiYSI6ImNqcGM0d3U4bTB6dWwzcW04ZHRsbHl0ZWoifQ.X9cvdajtPbs9JDMG-CMDsA'\n \n//Netherlands country coordinates\nconst App = () => {\n  const [viewport, setViewport] = useState({\n    latitude: 52.2129919,\n    longitude: 5.2793703,\n    zoom: 4\n  })\n  const geocoderContainerRef = useRef()\n  const mapRef = useRef()\n  const handleViewportChange = useCallback((newViewport) => setViewport(newViewport), [])\n\n  // if you are happy with Geocoder default settings, you can just use handleViewportChange directly\n  const handleGeocoderViewportChange = useCallback(\n    (newViewport) => {\n      const geocoderDefaultOverrides = { transitionDuration: 1000 }\n\n      return handleViewportChange({\n        ...newViewport,\n        ...geocoderDefaultOverrides\n      })\n    },\n    [handleViewportChange]\n  )\n\n  return (\n    <div style={{ height: '40vh', width: '600px' }}>\n      <div ref={geocoderContainerRef} style={{ position: 'absolute', top: 20, left: 20, zIndex: 1 }} />\n      <MapGL\n        ref={mapRef}\n        {...viewport}\n        width=\"100%\"\n        height=\"100%\"\n        onViewportChange={handleViewportChange}\n        mapboxApiAccessToken={MAPBOX_TOKEN}>\n        <Geocoder\n          mapRef={mapRef}\n          containerRef={geocoderContainerRef}\n          onViewportChange={handleGeocoderViewportChange}\n          mapboxApiAccessToken={MAPBOX_TOKEN}\n          position=\"top-left\"\n        />\n      </MapGL>\n    </div>\n  )\n}\n\nrender(<App />, document.getElementById('root'))\n\nexport default App"]},"metadata":{},"sourceType":"module"}